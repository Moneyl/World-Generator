/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus's Graphical User Interface
// Copyright (C) 2012-2017 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef TGUI_CLICKABLE_WIDGET_HPP
#define TGUI_CLICKABLE_WIDGET_HPP


#include <TGUI/Widget.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Clickable widget
    ///
    /// Signals:
    ///     - MousePressed (the left mouse button was pressed on top of the widget)
    ///         * Optional parameter sf::Vector2f: Mouse position relative to the widget position
    ///         * Uses Callback member 'mouse'
    ///
    ///     - MouseReleased (the left mouse button was released on top of the widget)
    ///         * Optional parameter sf::Vector2f: Mouse position relative to the widget position
    ///         * Uses Callback member 'mouse'
    ///
    ///     - Clicked (you left clicked the widget)
    ///         * Optional parameter sf::Vector2f: Mouse position relative to the widget position
    ///         * Uses Callback member 'mouse'
    ///
    ///     - Inherited signals from Widget
    ///
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class TGUI_API ClickableWidget : public Widget
    {
    public:

        typedef std::shared_ptr<ClickableWidget> Ptr; ///< Shared widget pointer
        typedef std::shared_ptr<const ClickableWidget> ConstPtr; ///< Shared constant widget pointer


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Default constructor
        ///
        /// @param size  Size of the widget
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ClickableWidget(const Layout2d& size = {100, 100});


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Constructor
        ///
        /// @param width   Width of the widget
        /// @param height  Height of the widget
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ClickableWidget(const Layout& width, const Layout& height);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Creates a new clickable widget
        ///
        /// @param size  Size of the clickable widget
        ///
        /// @return The new clickable widget
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        static ClickableWidget::Ptr create(Layout2d size = {100, 100});


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Makes a copy of another clickable widget
        ///
        /// @param widget  The other clickable widget
        ///
        /// @return The new clickable widget
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        static ClickableWidget::Ptr copy(ClickableWidget::ConstPtr widget);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Makes a copy of the widget
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual Widget::Ptr clone() const override
        {
            return std::make_shared<ClickableWidget>(*this);
        }


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @internal
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual bool mouseOnWidget(float x, float y) const override;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @internal
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void leftMousePressed(float x, float y) override;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @internal
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void leftMouseReleased(float x, float y) override;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @internal
        // This function draws nothing.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const override;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // TGUI_CLICKABLE_WIDGET_HPP
